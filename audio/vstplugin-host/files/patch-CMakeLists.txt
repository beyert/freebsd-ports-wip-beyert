--- CMakeLists.txt.orig	2022-02-11 10:14:58 UTC
+++ CMakeLists.txt
@@ -6,10 +6,17 @@ project(${PROJECT})
 
 include (CheckCXXCompilerFlag)
 
-if(UNIX AND NOT APPLE AND NOT MINGW)
+if (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
+    set(FREEBSD TRUE)
+endif()
+
+if(UNIX AND NOT APPLE AND NOT FREEBSD AND NOT MINGW)
     set(LINUX TRUE)
 endif()
 
+set(CMAKE_TRUE_C_COMPILER "${CMAKE_C_COMPILER}")
+set(CMAKE_TRUE_CXX_COMPILER "${CMAKE_CXX_COMPILER}")
+
 # some MinGW setups don't define WIN32!
 if (MINGW AND NOT WIN32)
     message(WARNING "Your MinGW setup doesn't define WIN32")
@@ -17,7 +24,7 @@ if (MINGW AND NOT WIN32)
 endif()
 
 # build Wine host
-if (LINUX)
+if (LINUX OR FREEBSD)
     option(BUILD_WINE "Build Wine host(s)" OFF)
 endif()
 if (BUILD_WINE)
@@ -29,6 +36,9 @@ if (BUILD_WINE)
     if (LINUX)
         add_definitions(-DVST_HOST_SYSTEM=VST_LINUX)
     endif()
+    if (FREEBSD)
+        add_definitions(-DVST_HOST_SYSTEM=VST_FREEBSD)
+    endif()
     if (APPLE)
         add_definitions(-DVST_HOST_SYSTEM=VST_MACOS)
     endif()
@@ -55,6 +65,9 @@ endif()
 if(LINUX AND CMAKE_COMPILER_IS_GNUCXX)
     option(STATIC_LIBS "link with static libraries (libstdc++ and libgcc)" ON)
 endif()
+if(FREEBSD AND CMAKE_COMPILER_IS_GNUCXX)
+    option(STATIC_LIBS "link with static libraries (libstdc++ and libgcc)" ON)
+endif()
 if(MINGW)
     option(STATIC_LIBS "link with static libraries (libstdc++, libgcc and phread)" ON)
 
@@ -70,7 +83,7 @@ if (WIN32)
     # always use on Windows!
     set(STDFS ON)
 else()
-    if (LINUX)
+    if (LINUX OR FREEBSD)
         if (BUILD_WINE)
             # std::filesystem causes big trouble on Wine...
             set(STDFS OFF CACHE BOOL "Use std::filesystem" FORCE)
@@ -183,7 +196,7 @@ include_directories(deps)
 option(VST2 "Enable VST2.x plug-ins" ON)
 add_definitions(-DUSE_VST2=$<BOOL:${VST2}>)
 if (VST2)
-    set(VST2DIR "${CMAKE_SOURCE_DIR}/vst/VST_SDK/VST2_SDK/" CACHE PATH "path to VST2_SDK")
+    set(VST2DIR "" CACHE PATH "path to VST2 SDK")
     message(STATUS "Build with VST2 support")
     message(STATUS "VST2DIR: ${VST2DIR}")
 endif()
@@ -202,7 +215,7 @@ option(BRIDGE "Enable plugin bridge" ON)
 add_definitions(-DUSE_BRIDGE=$<BOOL:${BRIDGE}>)
 if (BRIDGE)
     message(STATUS "Enable plugin bridge")
-    if(APPLE OR LINUX)
+    if(APPLE OR LINUX OR FREEBSD)
         # Try to directly build the 32-bit (Intel) version of 'HOST' with -m32.
         # This works on Linux and older macOS versions.
         # We don't enable this by default because on Linux we would have to install
@@ -212,13 +225,13 @@ if (BRIDGE)
         # NOTE: I've tried to use CHECK_CXX_COMPILER_FLAG(-m32 HAS_CXX_M32) but it always fails...
         option(BUILD_HOST32 "Build the 32-bit host app" OFF)
     endif()
-    if(APPLE)
+    if(APPLE OR FREEBSD)
         option(BUILD_HOST_AMD64 "Build 64-bit intel host app" OFF)
     endif()
 endif()
 
 # Wine support on Linux
-if (LINUX)
+if (LINUX OR FREEBSD)
     option(WINE "Enable support for running Windows VSTs with Wine" ON)
     if (WINE)
         if (BRIDGE)
@@ -257,19 +270,42 @@ if (LINUX)
     add_definitions("-fPIC")
     set(CMAKE_BUILD_RPATH_USE_ORIGIN ON)
 endif()
+if (FREEBSD)
+#    list(APPEND VST_LIBS "-L/usr/local/lib" "-L${PD_DIR}")
+    list(APPEND VST_LIBS "-L/usr/local/lib")
+    if (BRIDGE)
+        list(APPEND VST_LIBS "-lrt")
+    endif()
+##    if (BUILD_WINE)
+##        list(APPEND VST_LIBS "-lpthread")
+##    else()
+#        if(STATIC_LIBS)
+#          list(APPEND VST_LIBS "-static")
+#        endif()
+        list(APPEND VST_LIBS "-lpthread -ldl" "-lX11")
+##    endif()
+    if(STATIC_LIBS)
+        list(APPEND VST_LIBS "-static-libstdc++" "-static-libgcc")
+    endif()
+    add_definitions("-fPIC")
+    set(CMAKE_BUILD_RPATH_USE_ORIGIN ON)
+endif()
 if (WIN32 OR BUILD_WINE)
     # for COM
-    list(APPEND VST_LIBS "ole32")
+    set(VST_LIBS_WINE ${VST_LIBS})
+    list(APPEND VST_LIBS_WINE "ole32")
 endif()
 if (MINGW)
     if (STATIC_LIBS)
         list(APPEND VST_LIBS "-static-libstdc++" "-static-libgcc" "-static -lpthread")
+        list(APPEND VST_LIBS_WINE "-static-libstdc++" "-static-libgcc" "-static -lpthread")
     else()
-        list(APPEND VST_LIBS "-lpthread")
+        list(APPEND VST_LIBS_WINE "-lpthread")
     endif()
 endif()
 if (APPLE)
     list(APPEND VST_LIBS "-framework Cocoa" "-lpthread")
+    list(APPEND VST_LIBS_WINE "-framework Cocoa" "-lpthread")
 endif()
 
 
@@ -277,16 +313,19 @@ endif()
 include_directories(vst)
 
 set(LIBVST "vst")
+set(LIBS_WINE ${LIBVST} ${VST_LIBS_WINE})
 set(LIBS ${LIBVST} ${VST_LIBS})
 
 if (BUILD_HOST32)
     set(LIBVST32 "vst32")
     set(LIBS32 ${LIBVST32} ${VST_LIBS})
+    set(LIBS32_WINE ${LIBVST32} ${VST_LIBS_WINE})
 endif()
 
 if (BUILD_HOST_AMD64)
     set(LIBVST_AMD64 "vst_amd64")
     set(LIBS_AMD64 ${LIBVST_AMD64} ${VST_LIBS})
+    set(LIBS_AMD64_WINE ${LIBVST_AMD64} ${VST_LIBS_WINE})
 endif()
 
 add_subdirectory(vst)
@@ -304,7 +343,11 @@ else()
     set(HOST "host")
 endif()
 add_executable(${HOST} "vst/host.cpp") # HOST exe
-target_link_libraries(${HOST} ${LIBS})
+if (BUILD_WINE)
+  target_link_libraries(${HOST} ${LIBS_WINE})
+else()
+  target_link_libraries(${HOST} ${LIBS})
+endif()
 if (WMAIN AND (MINGW OR BUILD_WINE))
     # -municode must be a linker flag!
     target_link_libraries(${HOST} "-municode")
@@ -329,7 +372,11 @@ if (BUILD_HOST32)
     add_executable(${HOST32} "vst/host.cpp")
     target_compile_options(${HOST32} PUBLIC "-m32")
     target_link_options(${HOST32} PUBLIC "-m32")
+if (BUILD_WINE)
+    target_link_libraries(${HOST32} ${LIBS32_WINE})
+else()
     target_link_libraries(${HOST32} ${LIBS32})
+endif()
     if (WMAIN AND (MINGW OR BUILD_WINE))
         # -municode must be a linker flag!
         target_link_libraries(${HOST32} "-municode")
@@ -345,7 +392,11 @@ if (BUILD_HOST_AMD64)
     set(HOST_AMD64 "host_amd64")
     add_executable(${HOST_AMD64} "vst/host.cpp")
     set_target_properties(${HOST_AMD64} PROPERTIES OSX_ARCHITECTURES "x86_64")
+if (BUILD_WINE)
+    target_link_libraries(${HOST_AMD64} ${LIBS_AMD64_WINE})
+else()
     target_link_libraries(${HOST_AMD64} ${LIBS_AMD64})
+endif()
     set_target_properties(${HOST_AMD64} PROPERTIES LINK_FLAGS_RELEASE -s)
     # see above
     set(HOST_AMD64_PATH $<TARGET_FILE:${HOST_AMD64}>)
